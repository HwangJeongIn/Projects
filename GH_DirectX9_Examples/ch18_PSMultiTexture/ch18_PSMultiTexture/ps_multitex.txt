////////////////////////////////////////////////////////////////////////////
// 
// File: ps_alphablend.txt
// 
// Author: Frank Luna (C) All Rights Reserved
//
// System: AMD Athlon 1800+ XP, 512 DDR, Geforce 3, Windows XP, MSVC++ 7.0 
//
// Desc: Pixel shader that does multi texturing.
//          
////////////////////////////////////////////////////////////////////////////

//
// Globals
//

// 샘플러 객체는 텍스처와 샘플러 상태를 식별하기 위한 객체이다.

// 여기서 샘플러 상태란 텍스처 필터상태를 의미하며, 
// 샘플링이란 픽셀의 텍스처 좌표와 샘플러 상태에 따라 픽셀의 텍셀에 인덱싱하는 과정을 뜻한다.
// 이 전역변수들은 애플리캐이션내에서 불러와서 샘플러 상태와 텍스처를 지정한다.

// 좀더 엄격한 sampler1D 2D 3D Cube가 있다. 함수를 맞춰주어야한다.

sampler BaseTex;
sampler SpotLightTex;
sampler StringTex;

//
// Structures
//


struct PS_INPUT
{
// 아무런 색깔도 받지 않고있다.
// 그 이유는 컬러링과 조명에 완전히 텍스처만 이용하기 때문이다.
    float2 base      : TEXCOORD0;
    float2 spotlight : TEXCOORD1;
    float2 text      : TEXCOORD2;

	// POSITION은 버텍스 셰이더를 위한 변수
	// vector pos		 : SV_POSITION;
};

struct PS_OUTPUT
{
	//vector oPos	   : SV_POSITION;
    vector diffuse : COLOR0;

};


//
// Main
//

PS_OUTPUT Main(PS_INPUT input)
{
    // zero out members of output
    PS_OUTPUT output = (PS_OUTPUT)0;

    // sample appropriate textures
	// 적절한 텍스처를 샘플링한다.
	// 각 샘플러 객체는 애플리케이션내에서 텍스처와 샘플러 상태를 지정해주었다.
	// 거기에 uv좌표를 더하여 샘플링한다. // 텍셀 컬러 추출

    vector b = tex2D(BaseTex,      input.base);
    vector s = tex2D(SpotLightTex, input.spotlight);
    vector t = tex2D(StringTex,    input.text);

    // combine texel colors

	// 텍셀 컬러를 결합한다.
    vector c = b * s + t;

    // increase the intensity of the pixel slightly
    // 미세하게 향상
	c += 0.1f;

    // save the resulting pixel color
    output.diffuse = c;
	//output.oPos = input.pos * 2;

    return output;
}